name: ExamBuildAndDeployCombined

on:
  push:
    branches:
      - feat/SaltBr # main 브랜치 push 트리거
      #나중에 메인으로 변경
    pull_request:
      branches:
        - dev
        - feat/** # dev, feat/** 대상으로의 PR 생성 트리거
        - main

jobs:
#  build-and-test:
#    name: Build and Test
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v3
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#
#      - name: Install Docker Compose
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y docker-compose
#
#      - name: Set up Docker Compose
#        run: |
#          docker-compose up -d
#          docker-compose ps
#
#      - name: Wait for services to be ready
#        run: |
#          until docker-compose exec -T db mysqladmin ping -h"127.0.0.1" --silent; do
#            echo "Waiting for MySQL to be ready..."
#            sleep 5
#          done
#          sleep 10
#
#      - name: Grant permission for gradlew
#        run: chmod +x ./gradlew
#
#      - name: Build with Gradle
#        run: ./gradlew clean build -Duser.language=ko -Duser.country=KR
#
#      - name: Tear down Docker Compose
#        if: always()
#        run: docker-compose down

  deploy:
    name: Deploy to EC2
    if: github.event_name == 'push' && github.ref == 'refs/heads/feat/SaltBr'
    runs-on: ubuntu-latest
#    needs: build-and-test
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Create application-prod.properties
        run: |
          mkdir -p ./src/main/resources
          cat > ./src/main/resources/application-prod.properties << EOF
          spring.application.name=onlineexamplatform

          spring.datasource.url=${{ secrets.MYSQL_URL }}
          spring.datasource.username=${{ secrets.DB_USERNAME }}
          spring.datasource.password=${{ secrets.DB_PASSWORD }}
          spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

          spring.jpa.hibernate.ddl-auto=validate
          spring.jpa.show-sql=true
          spring.jpa.properties.hibernate.format_sql=true
          spring.jpa.properties.hibernate.use_sql_comments=true
          spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

          aws.s3.access-key=${{ secrets.AWS_ACCESS_KEY }}
          aws.s3.secret-key=${{ secrets.AWS_SECRET_KEY }}
          aws.s3.bucket-name=${{ secrets.AWS_BUCKET_NAME }}
          aws.region=${{ secrets.AWS_REGION }}

          spring.servlet.multipart.enabled=true
          spring.servlet.multipart.file-size-threshold=0B
          spring.servlet.multipart.max-file-size=100MB
          spring.servlet.multipart.max-request-size=100MB

          spring.data.redis.host=${{ secrets.REDIS_HOST }}
          spring.data.redis.port=${{ secrets.REDIS_PORT }}
          EOF

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Set up Docker Compose
        run: |
          docker compose up -d
          docker compose ps

      - name: Wait for services to be ready
        run: |
          until docker-compose exec -T db mysqladmin ping -h"127.0.0.1" --silent; do
            echo "Waiting for MySQL to be ready..."
            sleep 5
          done
          sleep 10

      - name: Grant permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle (prod profile)
        run: ./gradlew clean build -Dspring.profiles.active=prod -Duser.language=ko -Duser.country=KR

      - name: Tear down Docker Compose
        if: always()
        run: docker-compose down

      - name: Make Zip file
        run: zip -r $GITHUB_SHA.zip build/libs/*.jar appspec.yml scripts/deploy.sh

      - name: AWS credential setting
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Upload to S3
        run: aws s3 cp ./$GITHUB_SHA.zip s3://${{ secrets.AWS_S3_BUCKET }}/$GITHUB_SHA.zip

      - name: EC2 Deploy
        run: aws deploy create-deployment --application-name "$AWS_CODE_DEPLOY_APPLICATION" --deployment-config-name CodeDeployDefault.AllAtOnce --deployment-group-name "$AWS_CODE_DEPLOY_GROUP" --s3-location bucket="$AWS_S3_BUCKET",key=$GITHUB_SHA.zip,bundleType=zip
        env:
          AWS_CODE_DEPLOY_APPLICATION: ${{ secrets.AWS_CODE_DEPLOY_APPLICATION }}
          AWS_CODE_DEPLOY_GROUP: ${{ secrets.AWS_CODE_DEPLOY_GROUP }}
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}