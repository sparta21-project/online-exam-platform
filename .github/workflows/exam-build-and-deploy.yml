name: TodoBuildAndDeploy

# CI workflow 완료 시 트리거
on:
  workflow_run:
    workflows: [ "TodoBuildAndTest" ]
    types:
      - completed

jobs:
  deploy:

    # 조건 : main에서 CI가 통과해야한다.
    if: >
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.head_branch == 'feat/SaltBr'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:

      # 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # Java 언어 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # GitHub Actions secrets에 설정한 값을 application-prod.yml 환경변수로 주입
      - name: Set Yaml
        uses: microsoft/variable-substitution@v1
        with:
          files: ./src/main/resources/application-prod.yml
        env:
          spring.datasource.url: ${{ secrets.MYSQL_URL }}
          spring.datasource.username: ${{ secrets.DB_USERNAME }}
          spring.datasource.password: ${{ secrets.DB_PASSWORD }}
          spring.data.redis.host: ${{ secrets.REDIS_HOST }}
          spring.data.redis.port: ${{ secrets.REDIS_PORT }}

      # Docker Compose 설치
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      # Docker Compose 실행
      - name: Set up Docker Compose
        run: |
          docker-compose up -d
          docker-compose ps

      # 데이터베이스 동작 대기 5초 간격으로 재시도, 동작 후 10초 대기
      - name: Wait for services to be ready
        run: |
          until docker-compose exec -T db mysqladmin ping -h"127.0.0.1" --silent; do
            echo "Waiting for MySQL to be ready..."
            sleep 5
          done
          sleep 10

      # application-prod.yml파일을 대상으로 프로젝트 빌드
      - name: Build with Gradle (prod profile)
        run: ./gradlew clean build -Dspring.profiles.active=prod -Duser.language=ko -Duser.country=KR

      # Docker Compose down (컨테이너 및 이미지 정리)
      - name: Tear down Docker Compose
        if: always() # 성공, 실패 여부와 상관없이 실행
        run: docker-compose down

      # gradlew 파일에 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        shell: bash

      # 빌드 파일, appspec.yml, deploy.sh 파일을 대상으로 zip 파일 생성 ($GITHUB_SHA : 현재 커밋의 고유한 해시 값)
      - name: Make Zip file
        run: zip -r $GITHUB_SHA.zip build/libs/*.jar appspec.yml scripts/deploy.sh
        shell: bash

      # AWS 자격 증명 (GitHub Actions가 AWS로 접근)
      - name: AWS credential setting
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # S3 버킷에 생성한 zip 파일 업로드
      - name: Upload to S3
        run: aws s3 cp ./$GITHUB_SHA.zip s3://${{ secrets.AWS_S3_BUCKET }}/$GITHUB_SHA.zip

      # AWS CodeDeploy를 사용하여 EC2 인스턴스에 애플리케이션 배포
      - name: EC2 Deploy
        run: aws deploy create-deployment
          --application-name ${{ secrets.AWS_CODE_DEPLOY_APPLICATION }}
          --deployment-config-name CodeDeployDefault.AllAtOnce
          --deployment-group-name ${{ secrets.AWS_CODE_DEPLOY_GROUP }}
          --s3-location bucket=${{ secrets.AWS_S3_BUCKET }},key=$GITHUB_SHA.zip,bundleType=zip